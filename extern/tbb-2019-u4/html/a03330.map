<map id="tbb::internal::concurrent_vector_base_v3::helper::segment_not_used_predicate" name="tbb::internal::concurrent_vector_base_v3::helper::segment_not_used_predicate">
<area shape="rect" id="node2" href="$a00515.html" title="Base class for types that should not be assigned. " alt="" coords="5,1371,163,1448"/>
<area shape="rect" id="node3" href="$a00696.html" title="{tbb::internal::concurrent\l_vector_base_v3::segment_t\n||+ segment_t()\l+ segment_t()\l+ swap()\l+ operator=()\l+ load()\l+ store()\l+ store()\l+ store()\l}" alt="" coords="187,1312,378,1507"/>
<area shape="rect" id="node4" href="$a00081.html" title="Specialization for atomic&lt;void*&gt;, for sake of not allowing arithmetic or operator&#45;&gt;. " alt="" coords="211,1128,355,1249"/>
<area shape="rect" id="node5" href="$a00083.html" title="{tbb::internal::atomic\l_impl\&lt; void * \&gt;\n||+ atomic_impl()\l+ atomic_impl()\l+ fetch_and_store()\l+ fetch_and_store()\l+ compare_and_swap()\l+ compare_and_swap()\l+ operator value_type()\l+ load()\l+ load()\l+ store()\l+ store()\l# store_with_release()\l&#45; to_bits()\l&#45; to_value()\l&#45; to_bits_ref()\l}" alt="" coords="203,781,362,1079"/>
<area shape="rect" id="node6" href="$a00043.html" title="{tbb::internal::aligned\l_storage\&lt; void *, sizeof\l(void *)\&gt;\n||}" alt="" coords="187,291,347,397"/>
<area shape="rect" id="node7" href="$a00043.html" title="{tbb::internal::aligned\l_storage\&lt; value_type,\l size \&gt;\n||}" alt="" coords="278,5,429,112"/>
<area shape="rect" id="node9" href="$a00043.html" title="{tbb::internal::aligned\l_storage\&lt; T, sizeof(T)\&gt;\n||}" alt="" coords="362,175,521,267"/>
<area shape="rect" id="node8" href="$a00083.html" title="Base class that provides basic functionality for atomic&lt;T&gt; without fetch_and_add. ..." alt="" coords="366,421,525,719"/>
</map>
