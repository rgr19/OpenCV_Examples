<map id="tbb::flow::interface10::internal::untyped_receiver" name="tbb::flow::interface10::internal::untyped_receiver">
<area shape="rect" id="node2" href="$a00644.html" title="{tbb::flow::interface10\l::receiver\&lt; continue_msg \&gt;\n||+ try_put()\l+ try_put()\l# try_put_task_wrapper()\l# try_put_task()\l}" alt="" coords="595,624,777,760"/>
<area shape="rect" id="node8" href="$a00644.html" title="{tbb::flow::interface10\l::receiver\&lt; indexer_node\l_output_type \&gt;\n||+ try_put()\l+ try_put()\l# try_put_task_wrapper()\l# try_put_task()\l}" alt="" coords="801,617,968,767"/>
<area shape="rect" id="node12" href="$a00644.html" title="{tbb::flow::interface10\l::receiver\&lt; Input \&gt;\n||+ try_put()\l+ try_put()\l# try_put_task_wrapper()\l# try_put_task()\l}" alt="" coords="2399,624,2565,760"/>
<area shape="rect" id="node36" href="$a00644.html" title="{tbb::flow::interface10\l::receiver\&lt; kernel_input\l_tuple \&gt;\n||+ try_put()\l+ try_put()\l# try_put_task_wrapper()\l# try_put_task()\l}" alt="" coords="1392,617,1559,767"/>
<area shape="rect" id="node37" href="$a00644.html" title="{tbb::flow::interface10\l::receiver\&lt; TraitsType::T \&gt;\n||+ try_put()\l+ try_put()\l# try_put_task_wrapper()\l# try_put_task()\l}" alt="" coords="2590,624,2769,760"/>
<area shape="rect" id="node40" href="$a00644.html" title="{tbb::flow::interface10\l::receiver\&lt; TupleType \&gt;\n||+ try_put()\l+ try_put()\l# try_put_task_wrapper()\l# try_put_task()\l}" alt="" coords="2969,624,3136,760"/>
<area shape="rect" id="node42" href="$a00644.html" title="Pure virtual template class that defines a receiver of messages of type T. " alt="" coords="1779,264,1945,400"/>
<area shape="rect" id="node3" href="$a00179.html" title="Base class for receivers of completion messages. " alt="" coords="135,1095,303,1349"/>
<area shape="rect" id="node4" href="$a00195.html" title="{tbb::flow::interface10\l::internal::decrementer\l\&lt; tbb::flow::interface10\l::limiter_node\&lt; T \&gt; \&gt;\n|&#45; my_node\l|+ decrementer()\l+ set_owner()\l# graph_reference()\l&#45; execute()\l}" alt="" coords="5,2439,161,2604"/>
<area shape="rect" id="node5" href="$a00175.html" title="Implements methods for an executable node that takes continue_msg as input. " alt="" coords="285,1866,450,2134"/>
<area shape="rect" id="node7" href="$a00195.html" title="{tbb::flow::interface10\l::internal::decrementer\&lt; T \&gt;\n|&#45; my_node\l|+ decrementer()\l+ set_owner()\l# graph_reference()\l&#45; execute()\l}" alt="" coords="77,1932,261,2068"/>
<area shape="rect" id="node6" href="$a00178.html" title="Implements an executable node that supports continue_msg &#45;&gt; Output. " alt="" coords="283,2439,452,2604"/>
<area shape="rect" id="node9" href="$a00292.html" title="{tbb::flow::interface10\l::internal::function_input\l_base\&lt; indexer_node_output\l_type, queueing, cache_aligned\l_allocator\&lt; indexer_node_output\l_type \&gt;, multifunction_input\&lt; indexer\l_node_output_type, internal::wrap_tuple\l_elements\&lt; tbb::flow::tuple_size\&lt; kernel\l_input_tuple \&gt;::value, internal::multifunction\l_output, kernel_input_tuple \&gt;::type, queueing,\l cache_aligned_allocator\&lt; indexer_node_output_type \&gt; \&gt; \&gt;\n|# my_graph_ref\l# my_max_concurrency\l# my_concurrency\l# my_queue\l# my_predecessors\l&#45; forwarder_busy\l&#45; my_aggregator\l|+ __TBB_STATIC_ASSERT()\l+ function_input_base()\l+ function_input_base()\l+ ~function_input_base()\l+ try_put_task()\l+ register_predecessor()\l+ remove_predecessor()\l# reset_function_input_base()\l# reset_receiver()\l# graph_reference()\l# try_get_postponed_task()\l&#45; perform_queued_requests()\l&#45; handle_operations()\l&#45; internal_try_put_task()\l&#45; internal_forward()\l&#45; internal_try_put_bypass()\l&#45; try_put_task_impl()\l&#45; try_put_task_impl()\l&#45; apply_body_bypass()\l&#45; create_body_task()\l&#45; forward_task()\l&#45; create_forward_task()\l&#45; spawn_forward_task()\l}" alt="" coords="674,1683,1039,2317"/>
<area shape="rect" id="node10" href="$a00507.html" title="{tbb::flow::interface10\l::internal::multifunction\l_input\&lt; indexer_node_output\l_type, internal::wrap_tuple\l_elements\&lt; tbb::flow::tuple\l_size\&lt; kernel_input_tuple \&gt;::\lvalue, internal::multifunction\l_output, kernel_input_tuple \&gt;::\ltype, queueing, cache_aligned_allocator\l\&lt; indexer_node_output_type \&gt; \&gt;\n|+ N\l# my_body\l# my_init_body\l# my_output_ports\l|+ multifunction_input()\l+ multifunction_input()\l+ ~multifunction_input()\l+ copy_function_object()\l+ apply_body_impl_bypass()\l+ output_ports()\l# reset()\l}" alt="" coords="1019,2828,1273,3169"/>
<area shape="rect" id="node11" href="$a00508.html" title="{tbb::flow::interface10\l::multifunction_node\&lt;\l indexer_node_output_type,\l kernel_input_tuple \&gt;\n|# N\l|+ multifunction_node()\l+ multifunction_node()\l# reset_node()\l}" alt="" coords="1088,3447,1271,3597"/>
<area shape="rect" id="node13" href="$a00291.html" title="{internal::function\l_input_base\&lt; Input,\l Policy, A, function\l_input\&lt; Input, Output,\l Policy, A \&gt; \&gt;\n|# my_graph_ref\l# my_max_concurrency\l# my_concurrency\l# my_queue\l# my_predecessors\l&#45; forwarder_busy\l&#45; my_aggregator\l|+ __TBB_STATIC_ASSERT()\l+ function_input_base()\l+ function_input_base()\l+ ~function_input_base()\l+ try_put_task()\l+ register_predecessor()\l+ remove_predecessor()\l# reset_function_input_base()\l# reset_receiver()\l# graph_reference()\l# try_get_postponed_task()\l&#45; perform_queued_requests()\l&#45; handle_operations()\l&#45; internal_try_put_task()\l&#45; internal_forward()\l&#45; internal_try_put_bypass()\l&#45; try_put_task_impl()\l&#45; try_put_task_impl()\l&#45; apply_body_bypass()\l&#45; create_body_task()\l&#45; forward_task()\l&#45; create_forward_task()\l&#45; spawn_forward_task()\l}" alt="" coords="2627,1727,2825,2273"/>
<area shape="rect" id="node14" href="$a00292.html" title="{tbb::flow::interface10\l::internal::function_input\l_base\&lt; Input, Policy, A,\l function_input\&lt; Input, Output,\l Policy, A \&gt; \&gt;\n|# my_graph_ref\l# my_max_concurrency\l# my_concurrency\l# my_queue\l# my_predecessors\l&#45; forwarder_busy\l&#45; my_aggregator\l|+ __TBB_STATIC_ASSERT()\l+ function_input_base()\l+ function_input_base()\l+ ~function_input_base()\l+ try_put_task()\l+ register_predecessor()\l+ remove_predecessor()\l# reset_function_input_base()\l# reset_receiver()\l# graph_reference()\l# try_get_postponed_task()\l&#45; perform_queued_requests()\l&#45; handle_operations()\l&#45; internal_try_put_task()\l&#45; internal_forward()\l&#45; internal_try_put_bypass()\l&#45; try_put_task_impl()\l&#45; try_put_task_impl()\l&#45; apply_body_bypass()\l&#45; create_body_task()\l&#45; forward_task()\l&#45; create_forward_task()\l&#45; spawn_forward_task()\l}" alt="" coords="2173,1727,2372,2273"/>
<area shape="rect" id="node18" href="$a00291.html" title="{internal::function\l_input_base\&lt; Input,\l Policy, A, multifunction\l_input\&lt; Input, OutputPortSet,\l Policy, A \&gt; \&gt;\n|# my_graph_ref\l# my_max_concurrency\l# my_concurrency\l# my_queue\l# my_predecessors\l&#45; forwarder_busy\l&#45; my_aggregator\l|+ __TBB_STATIC_ASSERT()\l+ function_input_base()\l+ function_input_base()\l+ ~function_input_base()\l+ try_put_task()\l+ register_predecessor()\l+ remove_predecessor()\l# reset_function_input_base()\l# reset_receiver()\l# graph_reference()\l# try_get_postponed_task()\l&#45; perform_queued_requests()\l&#45; handle_operations()\l&#45; internal_try_put_task()\l&#45; internal_forward()\l&#45; internal_try_put_bypass()\l&#45; try_put_task_impl()\l&#45; try_put_task_impl()\l&#45; apply_body_bypass()\l&#45; create_body_task()\l&#45; forward_task()\l&#45; create_forward_task()\l&#45; spawn_forward_task()\l}" alt="" coords="2849,1727,3048,2273"/>
<area shape="rect" id="node19" href="$a00292.html" title="{tbb::flow::interface10\l::internal::function_input\l_base\&lt; Input, Policy, A,\l multifunction_input\&lt; Input,\l OutputPortSet, Policy, A \&gt; \&gt;\n|# my_graph_ref\l# my_max_concurrency\l# my_concurrency\l# my_queue\l# my_predecessors\l&#45; forwarder_busy\l&#45; my_aggregator\l|+ __TBB_STATIC_ASSERT()\l+ function_input_base()\l+ function_input_base()\l+ ~function_input_base()\l+ try_put_task()\l+ register_predecessor()\l+ remove_predecessor()\l# reset_function_input_base()\l# reset_receiver()\l# graph_reference()\l# try_get_postponed_task()\l&#45; perform_queued_requests()\l&#45; handle_operations()\l&#45; internal_try_put_task()\l&#45; internal_forward()\l&#45; internal_try_put_bypass()\l&#45; try_put_task_impl()\l&#45; try_put_task_impl()\l&#45; apply_body_bypass()\l&#45; create_body_task()\l&#45; forward_task()\l&#45; create_forward_task()\l&#45; spawn_forward_task()\l}" alt="" coords="1659,1727,1857,2273"/>
<area shape="rect" id="node28" href="$a00292.html" title="{tbb::flow::interface10\l::internal::function_input\l_base\&lt; Input, Policy, Allocator,\l function_input\&lt; Input, Output,\l Policy, Allocator \&gt; \&gt;\n|# my_graph_ref\l# my_max_concurrency\l# my_concurrency\l# my_queue\l# my_predecessors\l&#45; forwarder_busy\l&#45; my_aggregator\l|+ __TBB_STATIC_ASSERT()\l+ function_input_base()\l+ function_input_base()\l+ ~function_input_base()\l+ try_put_task()\l+ register_predecessor()\l+ remove_predecessor()\l# reset_function_input_base()\l# reset_receiver()\l# graph_reference()\l# try_get_postponed_task()\l&#45; perform_queued_requests()\l&#45; handle_operations()\l&#45; internal_try_put_task()\l&#45; internal_forward()\l&#45; internal_try_put_bypass()\l&#45; try_put_task_impl()\l&#45; try_put_task_impl()\l&#45; apply_body_bypass()\l&#45; create_body_task()\l&#45; forward_task()\l&#45; create_forward_task()\l&#45; spawn_forward_task()\l}" alt="" coords="2397,1727,2602,2273"/>
<area shape="rect" id="node29" href="$a00292.html" title="{tbb::flow::interface10\l::internal::function_input\l_base\&lt; Input, Policy, Allocator,\l multifunction_input\&lt; Input,\l internal::wrap_tuple_elements\l\&lt; tbb::flow::tuple_size\&lt; Output\l \&gt;::value, internal::multifunction\l_output, Output \&gt;::type, Policy, Allocator \&gt; \&gt;\n|# my_graph_ref\l# my_max_concurrency\l# my_concurrency\l# my_queue\l# my_predecessors\l&#45; forwarder_busy\l&#45; my_aggregator\l|+ __TBB_STATIC_ASSERT()\l+ function_input_base()\l+ function_input_base()\l+ ~function_input_base()\l+ try_put_task()\l+ register_predecessor()\l+ remove_predecessor()\l# reset_function_input_base()\l# reset_receiver()\l# graph_reference()\l# try_get_postponed_task()\l&#45; perform_queued_requests()\l&#45; handle_operations()\l&#45; internal_try_put_task()\l&#45; internal_forward()\l&#45; internal_try_put_bypass()\l&#45; try_put_task_impl()\l&#45; try_put_task_impl()\l&#45; apply_body_bypass()\l&#45; create_body_task()\l&#45; forward_task()\l&#45; create_forward_task()\l&#45; spawn_forward_task()\l}" alt="" coords="1064,1705,1348,2295"/>
<area shape="rect" id="node30" href="$a00292.html" title="{tbb::flow::interface10\l::internal::function_input\l_base\&lt; Input, Policy, Allocator,\l multifunction_input\&lt; Input,\l internal::wrap_tuple_elements\l\&lt; tbb::flow::tuple_size\&lt; tuple\l\&lt; Output \&gt; \&gt;::value, internal::multifunction\l_output, tuple\&lt; Output \&gt; \&gt;::type, Policy,\l Allocator \&gt; \&gt;\n|# my_graph_ref\l# my_max_concurrency\l# my_concurrency\l# my_queue\l# my_predecessors\l&#45; forwarder_busy\l&#45; my_aggregator\l|+ __TBB_STATIC_ASSERT()\l+ function_input_base()\l+ function_input_base()\l+ ~function_input_base()\l+ try_put_task()\l+ register_predecessor()\l+ remove_predecessor()\l# reset_function_input_base()\l# reset_receiver()\l# graph_reference()\l# try_get_postponed_task()\l&#45; perform_queued_requests()\l&#45; handle_operations()\l&#45; internal_try_put_task()\l&#45; internal_forward()\l&#45; internal_try_put_bypass()\l&#45; try_put_task_impl()\l&#45; try_put_task_impl()\l&#45; apply_body_bypass()\l&#45; create_body_task()\l&#45; forward_task()\l&#45; create_forward_task()\l&#45; spawn_forward_task()\l}" alt="" coords="1881,1697,2149,2303"/>
<area shape="rect" id="node31" href="$a00291.html" title="Input and scheduling for a function node that takes a type Input as input. " alt="" coords="2780,963,2979,1481"/>
<area shape="rect" id="node34" href="$a00292.html" title="Input and scheduling for a function node that takes a type Input as input. " alt="" coords="1804,956,2003,1488"/>
<area shape="rect" id="node15" href="$a00290.html" title="Implements methods for a function node that takes a type Input as input and sends. " alt="" coords="2220,2409,2408,2633"/>
<area shape="rect" id="node16" href="$a00290.html" title="{tbb::flow::interface10\l::internal::function_input\l\&lt; Input, Output, Policy,\l Allocator \&gt;\n|# my_body\l# my_init_body\l|+ function_input()\l+ function_input()\l+ ~function_input()\l+ copy_function_object()\l+ apply_body_impl()\l+ apply_body_impl_bypass()\l# reset_function_input()\l# successors()\l}" alt="" coords="2312,2879,2500,3118"/>
<area shape="rect" id="node17" href="$a00296.html" title="Implements a function node that supports Input &#45;&gt; Output. " alt="" coords="2316,3219,2496,3369"/>
<area shape="rect" id="node20" href="$a00507.html" title="Implements methods for a function node that takes a type Input as input. " alt="" coords="1619,2395,1812,2648"/>
<area shape="rect" id="node21" href="$a00507.html" title="{tbb::flow::interface10\l::internal::multifunction\l_input\&lt; Input, internal::\lwrap_tuple_elements\&lt; tbb::\lflow::tuple_size\&lt; tuple\&lt; Output\l \&gt; \&gt;::value, internal::multifunction\l_output, tuple\&lt; Output \&gt; \&gt;::type,\l Policy, Allocator \&gt;\n|+ N\l# my_body\l# my_init_body\l# my_output_ports\l|+ multifunction_input()\l+ multifunction_input()\l+ ~multifunction_input()\l+ copy_function_object()\l+ apply_body_impl_bypass()\l+ output_ports()\l# reset()\l}" alt="" coords="1868,2843,2085,3155"/>
<area shape="rect" id="node24" href="$a00507.html" title="{tbb::flow::interface10\l::internal::multifunction\l_input\&lt; Input, internal::\lwrap_tuple_elements\&lt; tbb::\lflow::tuple_size\&lt; Output \&gt;\l::value, internal::multifunction\l_output, Output \&gt;::type, Policy,\l Allocator \&gt;\n|+ N\l# my_body\l# my_init_body\l# my_output_ports\l|+ multifunction_input()\l+ multifunction_input()\l+ ~multifunction_input()\l+ copy_function_object()\l+ apply_body_impl_bypass()\l+ output_ports()\l# reset()\l}" alt="" coords="1298,2843,1503,3155"/>
<area shape="rect" id="node27" href="$a00507.html" title="{tbb::flow::interface10\l::internal::multifunction\l_input\&lt; kernel_input_tuple,\l internal::wrap_tuple_elements\l\&lt; tbb::flow::tuple_size\&lt; output\l_tuple \&gt;::value, internal::multifunction\l_output, output_tuple \&gt;::type, queueing,\l cache_aligned_allocator\&lt; kernel_input_tuple \&gt; \&gt;\n|+ N\l# my_body\l# my_init_body\l# my_output_ports\l|+ multifunction_input()\l+ multifunction_input()\l+ ~multifunction_input()\l+ copy_function_object()\l+ apply_body_impl_bypass()\l+ output_ports()\l# reset()\l}" alt="" coords="1537,2843,1843,3155"/>
<area shape="rect" id="node22" href="$a00508.html" title="{tbb::flow::interface10\l::multifunction_node\&lt;\l Input, tuple\&lt; Output \&gt;\l, Policy, Allocator \&gt;\n|# N\l|+ multifunction_node()\l+ multifunction_node()\l# reset_node()\l}" alt="" coords="1654,3447,1809,3597"/>
<area shape="rect" id="node23" href="$a00076.html" title="Implements async node. " alt="" coords="1635,3647,1827,3871"/>
<area shape="rect" id="node25" href="$a00508.html" title="implements a function node that supports Input &#45;&gt; (set of outputs) " alt="" coords="1311,3219,1461,3369"/>
<area shape="rect" id="node26" href="$a00508.html" title="{tbb::flow::interface10\l::multifunction_node\&lt;\l kernel_input_tuple, output\l_tuple \&gt;\n|# N\l|+ multifunction_node()\l+ multifunction_node()\l# reset_node()\l}" alt="" coords="1311,3447,1485,3597"/>
<area shape="rect" id="node32" href="$a00289.html" title="Implements methods for a function node that takes a type Input as input and sends. " alt="" coords="3072,1881,3260,2119"/>
<area shape="rect" id="node33" href="$a00506.html" title="Implements methods for a function node that takes a type Input as input. " alt="" coords="3284,1866,3472,2134"/>
<area shape="rect" id="node35" href="$a00292.html" title="{tbb::flow::interface10\l::internal::function_input\l_base\&lt; kernel_input_tuple,\l queueing, cache_aligned_allocator\l\&lt; kernel_input_tuple \&gt;, multifunction\l_input\&lt; kernel_input_tuple, internal\l::wrap_tuple_elements\&lt; tbb::flow::tuple\l_size\&lt; output_tuple \&gt;::value, internal\l::multifunction_output, output_tuple \&gt;::\ltype, queueing, cache_aligned_allocator\&lt;\l kernel_input_tuple \&gt; \&gt; \&gt;\n|# my_graph_ref\l# my_max_concurrency\l# my_concurrency\l# my_queue\l# my_predecessors\l&#45; forwarder_busy\l&#45; my_aggregator\l|+ __TBB_STATIC_ASSERT()\l+ function_input_base()\l+ function_input_base()\l+ ~function_input_base()\l+ try_put_task()\l+ register_predecessor()\l+ remove_predecessor()\l# reset_function_input_base()\l# reset_receiver()\l# graph_reference()\l# try_get_postponed_task()\l&#45; perform_queued_requests()\l&#45; handle_operations()\l&#45; internal_try_put_task()\l&#45; internal_forward()\l&#45; internal_try_put_bypass()\l&#45; try_put_task_impl()\l&#45; try_put_task_impl()\l&#45; apply_body_bypass()\l&#45; create_body_task()\l&#45; forward_task()\l&#45; create_forward_task()\l&#45; spawn_forward_task()\l}" alt="" coords="1372,1683,1635,2317"/>
<area shape="rect" id="node38" href="$a00462.html" title="{internal::key_matching\l_port\&lt; TraitsType \&gt;\n|&#45; my_aggregator\l&#45; my_join\l|+ key_matching_port()\l+ key_matching_port()\l+ ~key_matching_port()\l+ set_join_node_pointer()\l+ set_my_key_func()\l+ get_my_key_func()\l+ get_item()\l+ reset_port()\l+ reset_receiver()\l# try_put_task()\l# graph_reference()\l&#45; handle_operations()\l}" alt="" coords="3003,1088,3171,1356"/>
<area shape="rect" id="node39" href="$a00463.html" title="{tbb::flow::interface10\l::internal::key_matching\l_port\&lt; TraitsType \&gt;\n|&#45; my_aggregator\l&#45; my_join\l|+ key_matching_port()\l+ key_matching_port()\l+ ~key_matching_port()\l+ set_join_node_pointer()\l+ set_my_key_func()\l+ get_my_key_func()\l+ get_item()\l+ reset_port()\l+ reset_receiver()\l# try_put_task()\l# graph_reference()\l&#45; handle_operations()\l}" alt="" coords="3195,1081,3363,1363"/>
<area shape="rect" id="node41" href="$a00724.html" title="split_node: accepts a tuple as input, forwards each element of the tuple to its " alt="" coords="3572,1117,3739,1327"/>
<area shape="rect" id="node43" href="$a00114.html" title="Forwards messages of type T to all successors. " alt="" coords="993,595,1147,789"/>
<area shape="rect" id="node44" href="$a00119.html" title="Forwards messages in arbitrary order. " alt="" coords="1172,477,1368,907"/>
<area shape="rect" id="node48" href="$a00340.html" title="{tbb::flow::interface10\l::internal::indexer_input\l_port\&lt; T \&gt;\n|&#45; my_indexer_ptr\l&#45; my_try_put_task\l&#45; my_graph\l|+ set_up()\l+ reset_receiver()\l# try_put_task()\l# graph_reference()\l}" alt="" coords="1583,602,1741,782"/>
<area shape="rect" id="node49" href="$a00617.html" title="queueing join_port " alt="" coords="1765,580,1959,804"/>
<area shape="rect" id="node50" href="$a00658.html" title="The two&#45;phase join port. " alt="" coords="1983,536,2151,848"/>
<area shape="rect" id="node51" href="$a00475.html" title="Forwards messages only if the threshold has not been reached. " alt="" coords="2175,499,2375,885"/>
<area shape="rect" id="node52" href="$a00550.html" title="{tbb::flow::interface10a\l::overwrite_node\&lt; T \&gt;\n|# my_mutex\l# my_successors\l# my_buffer\l# my_buffer_is_valid\l|+ overwrite_node()\l+ overwrite_node()\l+ ~overwrite_node()\l+ register_successor()\l+ remove_successor()\l+ try_get()\l+ try_reserve()\l+ try_release()\l+ try_consume()\l+ is_valid()\l+ clear()\l# try_put_task()\l# try_put_task_impl()\l# graph_reference()\l# reset_receiver()\l# reset_node()\l}" alt="" coords="2793,514,2945,870"/>
<area shape="rect" id="node45" href="$a00603.html" title="Forwards messages in priority order. " alt="" coords="791,1022,957,1422"/>
<area shape="rect" id="node46" href="$a00613.html" title="Forwards messages in FIFO order. " alt="" coords="981,1117,1148,1327"/>
<area shape="rect" id="node47" href="$a00705.html" title="Forwards messages in sequence order. " alt="" coords="475,1932,649,2068"/>
<area shape="rect" id="node53" href="$a00933.html" title="{tbb::flow::interface10a\l::write_once_node\&lt; T \&gt;\n||+ write_once_node()\l+ write_once_node()\l# try_put_task()\l}" alt="" coords="3387,1161,3547,1283"/>
</map>
